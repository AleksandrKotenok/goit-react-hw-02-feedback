{"version":3,"sources":["components/feedback/feedback.jsx","components/App/App.jsx","index.js"],"names":["Counter","state","good","neutral","bad","goodIncrement","setState","prevState","neutralIncrement","badIncrement","countTotalFeedback","countPositiveFeedbackPercentage","Math","round","type","onClick","this","Component","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2NAEMA,E,4MAOHC,MAAQ,CACLC,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGRC,cAAgB,kBAAM,EAAKC,UAAS,SAAAC,GAAS,MAAK,CAAEL,KAAMK,EAAUL,KAAO,O,EAC3EM,iBAAmB,kBAAM,EAAKF,UAAS,SAAAC,GAAS,MAAK,CAAEJ,QAASI,EAAUJ,QAAU,O,EACpFM,aAAe,kBAAM,EAAKH,UAAS,SAAAC,GAAS,MAAK,CAAEH,IAAKG,EAAUH,IAAM,O,EACxEM,mBAAqB,kBAAM,EAAKT,MAAMC,KAAO,EAAKD,MAAME,QAAU,EAAKF,MAAMG,K,EAC7EO,gCAAkC,kBAAMC,KAAKC,MAAuB,IAAhB,EAAKZ,MAAMC,KAAU,EAAKQ,uB,4CAC9E,WAEG,OACG,gCACG,uDACA,wBAAQI,KAAK,SAASC,QAASC,KAAKX,cAApC,kBACA,wBAAQS,KAAK,SAASC,QAASC,KAAKR,iBAApC,qBACA,wBAAQM,KAAK,SAASC,QAASC,KAAKP,aAApC,iBACCO,KAAKN,qBAAuB,EAC1B,gCACG,sCAASM,KAAKf,MAAMC,QACpB,yCAAYc,KAAKf,MAAME,WACvB,qCAAQa,KAAKf,MAAMG,OACnB,uCAAUY,KAAKN,wBACf,mDAAsBM,KAAKL,kCAA3B,UACM,4C,GAjCFM,aAsCPjB,IC9BAkB,MARf,WACE,OACE,cAAC,WAAD,UACE,cAAC,EAAD,OCFNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.6f712d4f.chunk.js","sourcesContent":["import React,{ Component } from 'react';\r\nimport PropTypes from 'prop-types'\r\nclass Counter extends Component {\r\n   \r\n   static propTypes = {\r\n      good: PropTypes.number,\r\n      neutral:PropTypes.number,\r\n      bad:PropTypes.string\r\n   }\r\n   state = {\r\n      good: 0,\r\n      neutral: 0,\r\n      bad: 0\r\n   }\r\n   \r\n   goodIncrement = () => this.setState(prevState => ({ good: prevState.good + 1 }))\r\n   neutralIncrement = () => this.setState(prevState => ({ neutral: prevState.neutral + 1 }))\r\n   badIncrement = () => this.setState(prevState => ({ bad: prevState.bad + 1 })) \r\n   countTotalFeedback = () => this.state.good + this.state.neutral + this.state.bad \r\n   countPositiveFeedbackPercentage = () => Math.round((this.state.good*100)/this.countTotalFeedback())\r\n   render() {\r\n      \r\n      return (\r\n         <div>\r\n            <h1>Please leave feedback</h1>\r\n            <button type=\"button\" onClick={this.goodIncrement}>Good</button>\r\n            <button type=\"button\" onClick={this.neutralIncrement}>Neutral</button>\r\n            <button type=\"button\" onClick={this.badIncrement}>Bad</button>\r\n            {this.countTotalFeedback() > 0 ? (\r\n               <div>\r\n                  <p>Good:{this.state.good}</p>\r\n                  <p>Neutral:{this.state.neutral}</p>\r\n                  <p>Bad:{this.state.bad}</p>\r\n                  <p>Total:{this.countTotalFeedback()}</p>\r\n                  <p>Positive feedback:{this.countPositiveFeedbackPercentage()}%</p>\r\n               </div>):(<p>none</p>)}\r\n         </div>\r\n      )\r\n   }\r\n}\r\nexport default Counter","import { Fragment } from 'react'\nimport Counter from '../feedback/feedback.jsx'\nfunction App() {\n  return (\n    <Fragment>\n      <Counter/>\n    </Fragment>\n  )\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App/App.jsx';\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n"],"sourceRoot":""}